---
import { getEntries, type CollectionEntry } from "astro:content";
import Pill from "./Pill.astro";
import LinkIcon from "./LinkIcon.astro";

interface Props {
  href: string;
  project: CollectionEntry<"projects">;
}

const { project } = Astro.props;

const tags: CollectionEntry<"tags">[] = await getEntries(project.data.tags); // Resolve an array of references
---

<article class="card">
  {
    project.data.preview ? (
      <img
        class="preview-image"
        src={project.data.preview?.src}
        alt={`${project.data.title} preview image`}
      />
    ) : (
      <div class="preview-image">
        <h1 class="no-preview-image">No image</h1>
      </div>
    )
  }

  <div class="details">
    <header>
      {
        project.data.logo ? (
          <img
            src={project.data.logo.src}
            alt={`${project.data.title} logo`}
            width={250}
          />
        ) : (
          <h1>{project.data.title}</h1>
        )
      }
    </header>

    <div class="description">
      <p>{project.body}</p>

      <ul class="info-pills">
        {
          project.data.platforms.map((platform) => (
            <li>
              <Pill
                name={platform}
                backgroundColour="#ddf4ff"
                textColour="#2d78cf"
              />
            </li>
          ))
        }
        {
          tags.map((tag) => (
            <li>
              <Pill
                name={tag.data.name}
                backgroundColour={"#ececec"}
                textColour={"#535353"}
              />
            </li>
          ))
        }

        <li>
          <Pill name={project.data.year} />
        </li>

        <!-- {
          project.body && (
            <li>
              <LinkIcon
                href={href}
                iconName={"book-open-text"}
                alt={`More on ${project.data.title}`}
              />
            </li>
          )
        } -->

        {
          project.data.links?.map((link) => (
            <li>
              <LinkIcon
                href={link.link}
                iconName={link.icon}
                alt={link.title}
                target="_blank"
              />
            </li>
          ))
        }
      </ul>
    </div>
  </div>
</article>

<script>
  function updatePreviewImageHeight() {
    const previewImages = document.getElementsByClassName("preview-image");

    if (!previewImages) {
      return;
    }

    for (const previewImage of previewImages) {
      (previewImage as HTMLElement).style.height =
        `${window.innerHeight - 585}px`;
    }
  }

  function updateCardVisibility() {
    const projectCards = document.getElementsByClassName("card");

    if (!projectCards) {
      return;
    }

    for (const card of projectCards) {
      const rect = card.getBoundingClientRect();
      const inView = rect.left >= 0 && rect.right <= window.innerWidth;

      (card as HTMLElement).style.opacity = inView ? "1" : "0.45";
    }
  }

  const cardList = document.getElementById("card-list");
  cardList?.addEventListener("scroll", updateCardVisibility);

  document.addEventListener("DOMContentLoaded", updatePreviewImageHeight);
  document.addEventListener("DOMContentLoaded", updateCardVisibility);

  window.addEventListener("resize", updatePreviewImageHeight);
  window.addEventListener("resize", updateCardVisibility);
</script>

<style>
  .card {
    transition: opacity 0.3s;
    flex: 1;
    background-color: snow;
    padding: 1rem;
    border-radius: 1rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    justify-content: space-between;
    align-items: center;
    box-sizing: border-box;
  }
  .preview-image {
    display: flex;
    align-items: center;
  }
  .no-preview-image {
    height: fit-content;
    color: rgb(241, 241, 241);
  }
  .details {
    min-width: 700px;
    display: flex;
    justify-content: start;
    gap: 2rem;
  }
  .details header {
    display: flex;
    flex-direction: column;
    justify-content: center;
    height: 100%;
    gap: 1rem;
    padding-right: 1rem;
    border-right: solid 2px rgb(241, 241, 241);
  }
  .info-pills {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  .description {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  .description ul {
    display: flex;
    flex-direction: row;
    gap: 0.5rem;
  }
</style>
