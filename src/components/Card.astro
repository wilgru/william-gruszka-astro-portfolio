---
import { getEntries, type CollectionEntry } from 'astro:content';
import TagPill from './TagPill.astro';
import { Image } from 'astro:assets';
import LinkIcon from './LinkIcon.astro';

interface Props {
	href: string;
	project: CollectionEntry<'projects'>;
}

// const pathname = new URL(Astro.request.url).pathname

const { href, project } = Astro.props;

const tags: CollectionEntry<'tags'>[] = await getEntries(project.data.tags); // Resolve an array of references
---

<article class="project-card">
	<!-- {pathname.includes(href) ? <Image src={project.data.staticImage} alt={`${project.data.title} demo image`}/> : <img alt="yoo"/>} -->
	<header>
		{project.data.logo ? <Image src={project.data.logo} alt={`${project.data.title} logo`} width={250}/> : <h1>{project.data.title}</h1>}
	</header>

	<ul>
		<li>{project.data.year}</li>
		{tags.map(tag => (
			<li>
				<TagPill tag={tag} />
			</li>
		))}
	</ul>
	
	<p>{project.data.description}</p>

	<ul>
		{project.body && <li> <LinkIcon href={href} iconName={"newspaper"} alt={project.data.title}/></li>}
		
		{project.data.links?.map(link => (
			<li>
				<LinkIcon href={link.link} iconName={link.icon} alt={link.title}/>
			</li>
		))}
	</ul>
</article>

<style>
	.project-card {
		display: flex;
		flex-direction: column;
		width: 100%;
		gap: 0.5rem;
	}
	.project-card header {
		display: flex;
		flex-direction: column;
		justify-content: center;
		height: 100px;
		gap: 1rem;
	}
	.project-card ul {
		display: flex;
		flex-direction: row;
		flex-wrap: wrap;
		padding: 0;
	}
	.project-card li {
		list-style: none;
	}
</style>
